{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 逻辑斯特回归示例\n",
    "\n",
    "- [逻辑斯特回归](#逻辑斯特回归)\n",
    "- [帮助理解numpy中的meshgrid函数](#帮助理解numpy中的meshgrid函数)\n",
    "- [正则化后的逻辑斯特回归](#加正则化项的逻辑斯特回归)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import minimize\n",
    "\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "\n",
    "pd.set_option('display.notebook_repr_html',False)\n",
    "pd.set_option('display.max_columns',False)\n",
    "pd.set_option('display.max_rows',150)\n",
    "pd.set_option('display.max_seq_items',None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#在文档中显示matplotlib包生成的图形\n",
    "%matplotlib inline \n",
    "import seaborn as sns\n",
    "sns.set_context('notebook')\n",
    "sns.set_style('dark')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 逻辑斯特回归"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def loaddata(file,delimeter):\n",
    "    data=np.loadtxt(file,delimiter=delimeter)\n",
    "    print('Dimensions :',data.shape)\n",
    "    #data[m:n,q:p],第一个参数表示显示data的列数，第二个参数表示显示data的行数\n",
    "    print(data[1:6,1:2])\n",
    "    return(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plotData(data,label_x,label_y,label_pos,label_neg,axes=None):\n",
    "    #获取正负样本的下标（即哪些是正样本，哪些是负样本）\n",
    "    neg = data[:,2]==0\n",
    "    pos = data[:,2]==1\n",
    "    if axes == None:\n",
    "        axes=plt.gca()\n",
    "    axes.scatter(data[pos][:,0],data[pos][:,1],marker='+',c='k',s=60,linewidth=2,label=label_pos)\n",
    "    axes.scatter(data[neg][:,0],data[neg][:,1],c='y',s=60,label=label_neg)\n",
    "    axes.set_xlabel(label_x)\n",
    "    axes.set_ylabel(label_y)\n",
    "    axes.legend(frameon=True,fancybox=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimensions : (100, 3)\n",
      "[[43.89499752]\n",
      " [72.90219803]\n",
      " [86.3085521 ]\n",
      " [75.34437644]\n",
      " [56.31637178]]\n"
     ]
    }
   ],
   "source": [
    "data=loaddata('data1.txt',',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=np.c_[np.ones((data.shape[0],1)), data[:,0:2]]\n",
    "y=np.c_[data[:,2]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "plotData(data,'Exam 1 score','Exam 2 score','Pass','Fail')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#逻辑斯特回归假设#\n",
    "\n",
    "#theta表示每一个特征的权值\n",
    "$$h_{\\theta}(x) = g(\\theta^{T}x)$$\n",
    "#因为二分类问题中的结果都是0或者1，所以引入sigmoid函数进行结果处理\n",
    "$$g(z)=\\frac{1}{1+e^{−z}}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "#定义sigmod函数\n",
    "def sigmoid(z):\n",
    "    return(1/(1+np.exp(-z)))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#损失函数#\n",
    "#m表示的是有m个特征\n",
    "#逻辑回归使用的损失函数是交叉损失，引入了log函数，与线性回归是不同的，线性回归使用的是平方差损失\n",
    "$$J(\\theta)=\\frac{1}{m}\\sum_{i=1}^{m}\\big[-y^{(i)}\\,log\\,(h_\\theta\\,(x^{(i)}))-(1-y^{(i)})\\,log\\,(1-h_\\theta(x^{(i)}))\\big] $$\n",
    "\n",
    "#向量化损失函数(矩阵形式)\n",
    "\n",
    "$$J(\\theta)=\\frac{1}{m}\\big((\\,log\\,(g(X\\theta))^Ty+(\\,log\\,(1-g(X\\theta)^T(1-y))\\big)$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "#定义损失函数\n",
    "def costFunction(theta,X,y):\n",
    "    m=y.size\n",
    "    h=sigmoid(X.dot(theta))\n",
    "    J=-1.0*(1.0/m)*(np.log(h).T.dot(y) + np.log(1-h).T.dot(1-y))\n",
    "    if np.isnan(J[0]):\n",
    "        return(np.inf)\n",
    "    return J[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 求解偏导函数\n",
    "#该公式求的是第j个权重theta的值\n",
    "\n",
    "$$ \\frac{\\delta J(\\theta)}{\\delta\\theta_{j}}=\\frac{1}{m}\\sum_{i=1}^{m}(h_\\theta(x^{(i)})-y^{(i)})x^{(i)}_{j} $$\n",
    "\n",
    "#### 向量化的偏导(梯度)\n",
    "\n",
    "$$ \\frac{\\delta J(\\theta)}{\\delta\\theta_{j}} = \\frac{1}{m}X^T(g(X\\theta)-y)$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "#求解梯度\n",
    "def gradient(theta,X,y):\n",
    "    m=y.size\n",
    "    h=sigmoid(X.dot(theta.reshape(-1,1)))\n",
    "    grad=(1.0/m)*X.T.dot(h-y)\n",
    "    return(grad.flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost:\n",
      " 0.6931471805599452\n",
      "Grad:\n",
      " [ -0.1        -12.00921659 -11.26284221]\n"
     ]
    }
   ],
   "source": [
    "initial_theta=np.zeros(X.shape[1])\n",
    "cost=costFunction(initial_theta,X,y)\n",
    "grad=gradient(initial_theta,X,y)\n",
    "print('Cost:\\n',cost)\n",
    "print('Grad:\\n',grad)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "E:\\ys_alva\\Jupyter_Install\\lib\\site-packages\\ipykernel_launcher.py:5: RuntimeWarning: divide by zero encountered in log\n",
      "  \"\"\"\n",
      "E:\\ys_alva\\Jupyter_Install\\lib\\site-packages\\ipykernel_launcher.py:5: RuntimeWarning: divide by zero encountered in log\n",
      "  \"\"\"\n"
     ]
    }
   ],
   "source": [
    "#最小化损失函数，这里与线性回归不同的是，线性回归是通过梯度下降来求theta的值\n",
    "res=minimize(costFunction,initial_theta,args=(X,y),jac=gradient,options={'maxiter':400})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "#根据输入的任意两科成绩进行预测通过的概率\n",
    "def predict(theta,X,threshold=0.5):\n",
    "    p=sigmoid(X.dot(theta.T))>=threshold\n",
    "    return(p.astype('int'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "y=np.array([1,3,34])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "z=y.reshape(-1,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "      fun: 0.20349770158950983\n",
       " hess_inv: array([[ 2.85339493e+03, -2.32908823e+01, -2.27416470e+01],\n",
       "       [-2.32908823e+01,  2.04489131e-01,  1.72969525e-01],\n",
       "       [-2.27416470e+01,  1.72969525e-01,  1.96170322e-01]])\n",
       "      jac: array([-2.68557631e-09,  4.36433478e-07, -1.39671758e-06])\n",
       "  message: 'Optimization terminated successfully.'\n",
       "     nfev: 34\n",
       "      nit: 25\n",
       "     njev: 30\n",
       "   status: 0\n",
       "  success: True\n",
       "        x: array([-25.16131634,   0.2062316 ,   0.20147143])"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7762903249331015"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sigmoid(np.array([1,45,85]).dot(res.x.T))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0xcf3ce67b00>"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xcf3cc93b70>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(45,85,c='r',marker='>',label='(45,85)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[30.05882245, 31.48268031, 32.90653818, ..., 96.98014207,\n",
       "        98.40399993, 99.8278578 ],\n",
       "       [30.05882245, 31.48268031, 32.90653818, ..., 96.98014207,\n",
       "        98.40399993, 99.8278578 ],\n",
       "       [30.05882245, 31.48268031, 32.90653818, ..., 96.98014207,\n",
       "        98.40399993, 99.8278578 ],\n",
       "       ...,\n",
       "       [30.05882245, 31.48268031, 32.90653818, ..., 96.98014207,\n",
       "        98.40399993, 99.8278578 ],\n",
       "       [30.05882245, 31.48268031, 32.90653818, ..., 96.98014207,\n",
       "        98.40399993, 99.8278578 ],\n",
       "       [30.05882245, 31.48268031, 32.90653818, ..., 96.98014207,\n",
       "        98.40399993, 99.8278578 ]])"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xcf3cd1d7b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#画决策边界\n",
    "#scatter方法是绘制散点图\n",
    "plt.scatter(45,85,s=60,c='r',marker='v',label='(45,85)')\n",
    "plotData(data,'Exam 1 score','Exam 2 score','Admitted','Not admitted')\n",
    "x1_min,x1_max=X[:,1].min(),X[:,1].max(),\n",
    "x2_min,x2_max=X[:,2].min(),X[:,2].max(),\n",
    "\n",
    "#meshgrid的作用是切割有函数参数一和参数二形成的网格\n",
    "xx1, xx2 = np.meshgrid(np.linspace(x1_min, x1_max), np.linspace(x2_min, x2_max))\n",
    "h=sigmoid(np.c_[np.ones((xx1.ravel().shape[0],1)),xx1.ravel(),xx2.ravel()].dot(res.x))\n",
    "h=h.reshape(xx1.shape)\n",
    "\n",
    "#画出等高线,根据h>0.5或者小于0.5画出阈值\n",
    "plt.contour(xx1,xx2,h,[0.5],linewidths=1,colors='b')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 帮助理解numpy中的meshgrid函数\n",
    "#### X,Y=np.meshgrid(x,y),若x为m维向量，y为n维向量，那么X,Y均为n行m列矩阵\n",
    "#### X矩阵的行向量是x的简单复制\n",
    "#### Y矩阵的列向量是y的简单复制"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([[0.  , 0.25, 0.5 , 0.75, 1.  ],\n",
       "        [0.  , 0.25, 0.5 , 0.75, 1.  ],\n",
       "        [0.  , 0.25, 0.5 , 0.75, 1.  ]]), array([[0. , 0. , 0. , 0. , 0. ],\n",
       "        [0.5, 0.5, 0.5, 0.5, 0.5],\n",
       "        [1. , 1. , 1. , 1. , 1. ]]))"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "m, n = (5, 3)\n",
    "x = np.linspace(0, 1, m)\n",
    "y = np.linspace(0, 1, n)\n",
    "X, Y = np.meshgrid(x,y)\n",
    "X,Y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 加正则化项的逻辑斯特回归"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dimensions : (118, 3)\n",
      "[[0.68494]\n",
      " [0.69225]\n",
      " [0.50219]\n",
      " [0.46564]\n",
      " [0.2098 ]]\n"
     ]
    }
   ],
   "source": [
    "data2=loaddata('data2.txt',',')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "#拿到X和y\n",
    "X=np.c_[data2[:,0:2]]\n",
    "y=np.c_[data2[:,2]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xcf3d1af128>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotData(data2,'Microchip Test 1','Microchip Test 2','y=1','y=0')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "#此时的数据分类是会用到多项式的，即传入的X会用到多次幂(根据散点图的分布)\n",
    "poly=PolynomialFeatures(6)\n",
    "XX=poly.fit_transform(data2[:,0:2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 正则化后的损失函数\n",
    "$$ J(\\theta)=\\frac{1}{m}\\sum_{i=1}^{m}\\big[-y^{(i)}\\,log\\,(h_(\\theta)(x^{(i)}))-(1-y^{(i)})\\,log\\,(1-h_(\\theta)(x^{(i)}))\\big] + \\frac{\\lambda}{2m}\\sum_{j=1}^{m}\\theta_{j}^{2} $$\n",
    "\n",
    "#### 向量化后的损失函数（矩阵形式）\n",
    "$$ J(\\theta) = \\frac{1}{m}\\big((\\,log\\,(g(X\\theta))^Ty+(\\,log\\,(1-g(X\\theta))^T(1-y)\\big) + \\frac{\\lambda}{2m}\\sum_{j=1}^{n}\\theta_{j}^{2} $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(118, 28)"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "XX.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "#定义损失函数\n",
    "def costFunctionReg(theta,reg,*args):\n",
    "    m=y.size\n",
    "    h=sigmoid(XX.dot(theta))\n",
    "    J=-1.0*(1.0/m)*(np.log(h).T.dot(y)+np.log(1-h).T.dot(1-y))+(reg/(2.0*m))*np.sum(np.square(theta[1:]))\n",
    "    if np.isnan(J[0]):\n",
    "        return(np.inf)\n",
    "    return(J[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 偏导（梯度）\n",
    "$$ \\frac{\\delta J(\\theta)}{\\delta \\theta_{j}}=\\frac{1}{m}\\sum_{i=1}^{m}(h_{\\theta}(x^{(i)}-y^{(i)})x_{j}^{(i)}+ \\frac{\\lambda}{m}\\theta_{j} $$\n",
    "\n",
    "#### 向量化的偏导（梯度）\n",
    "#### $$ \\frac{\\delta J(\\theta)}{\\delta\\theta_{j}} = \\frac{1}{m} X^T(g(X\\theta)-y) + \\frac{\\lambda}{m}\\theta_{j}$$\n",
    "##### $$\\text{注意，我们另外自己加的参数 } \\theta_{0} \\text{ 不需要被正则化}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "def gradientReg(theta,reg,*args):\n",
    "    m=y.size\n",
    "    h=sigmoid(XX.dot(theta.reshape(-1,1)))\n",
    "    grad=(1.0/m)*XX.T.dot(h-y)+(reg/m)*np.r_[[[0]],theta[1:].reshape(-1,1)]\n",
    "    return(grad.flatten())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6931471805599453"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "initial_theta=np.zeros(XX.shape[1])\n",
    "costFunctionReg(initial_theta,1,XX,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0xcf3d27c390>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,axes=plt.subplots(1,3,sharey=True,figsize=(17,5))\n",
    "#决策边界，分别看正则化系数lambda太大或者太小分别出现的情况\n",
    "#lambda=0,此时出现的情况是每个点都会出现在决策边界上，即过拟合现象\n",
    "#lambda=1,正确的设置方式\n",
    "#lambda=100,正则化项太激进，导致会根本无法画出准确决策边界\n",
    "for i,C in enumerate([0.0,1.0,100.0]):\n",
    "    #最优化 costFunctionReg\n",
    "    res2=minimize(costFunctionReg,initial_theta,args=(C,XX,y),jac=gradientReg,options={'maxiter':3000})\n",
    "    #准确率\n",
    "    accuracy=100.0*sum(predict(res2.x,XX) == y.ravel())/y.size\n",
    "    \n",
    "    #对X,y的散列 绘图\n",
    "    plotData(data2,'Microchip Test 1','Microchip Test 2','y=1','y=0',axes.flatten()[i])\n",
    "    #画出决策边界\n",
    "    x1_min,x1_max=X[:,0].min(),X[:,0].max()\n",
    "    x2_min,x2_max=X[:,1].min(),X[:,1].max()\n",
    "    xx1,xx2=np.meshgrid(np.linspace(x1_min,x1.max),np.linspace(x2.min,x2_max))\n",
    "    h = sigmoid(poly.fit_transform(np.c_[xx1.ravel(), xx2.ravel()]).dot(res2.x))\n",
    "    h = h.reshape(xx1.shape)\n",
    "    axes.flatten()[i].contour(xx1, xx2, h, [0.5], linewidths=1, colors='g');       \n",
    "    axes.flatten()[i].set_title('Train accuracy {}% with Lambda = {}'.format(np.round(accuracy, decimals=2), C))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
